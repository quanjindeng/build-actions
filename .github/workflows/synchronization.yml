#
# 同步上游仓库或者清理发布都需要用REPO_TOKEN密匙
#
# 同一个仓库只需要存入一次密匙即可，这密匙基本是万能的，什么都能用上
#
# REPO_TOKEN密匙制作教程：https://git.io/jm.md
#
#
# 说明：
# 
# ‘清理Actions空间’ 删除12小时之前在Actions的固件，保留数设置没效，一删除就会把在删除时间段内的固件全部删除
#
# ‘删除releases,可设置保留数’ 每次启动都生效，可以设置保留数
#
#  手动按钮启动时候参数为true时生效，为false是关闭项目启动
#
# ‘同步上游仓库’ 只有在手动启动时参数改为fork再启动才生效，同步仓库时会自动保留config配置文件和备份diy-part.sh文件
#
# 同步完上游仓库后，如若你有自建机型文件夹的话，要注意对比diy-part.sh文件有没有更新内容
#
#  为防止开启跟关闭时候跟清理空间和删除releases混淆，‘同步上游仓库’的开关开启参数为 fork
#
# env:下面的OLDER_WORKFLOW和OLDER_RELEASES是定时启动时候设置开或者关闭项目运行（true为开，false关）
#


name: 同步上游或清理仓库
on:
  workflow_dispatch:
    inputs:
      older-actions:
        description: 'true-actions改true开启清理Actions空间'
        required: false
        default: 'true-actions'
      older-releases:
        description: 'true-actions改true开启删除releases'
        required: false
        default: 'true-actions'
      again-fork:
        description: 'fork-actions改fork开启同步上游仓库'
        required: false
        default: 'fork-actions'

#  schedule:
#    - cron: 10 4 * * *

env:
  OLDER_WORKFLOW: true
  OLDER_RELEASES: true
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  TZ: Asia/Shanghai

jobs:
  del_runs:
    runs-on: Ubuntu-20.04
    name: 同步上游或清理仓库
    steps:
    
    - name: 准备结束
      uses: actions/checkout@v2
      
    - name: 部署环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update > /dev/null 2>&1
        sudo -E apt-get -qq install -y git subversion git-core wget curl grep > /dev/null 2>&1
        sudo timedatectl set-timezone "$TZ"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
    
    - name: 设置项目开关参数控制
      run: |
        if [[ -n "${{ github.event.inputs }}" ]]; then
          if [[ "${{ github.event.inputs.older-actions }}" != 'true' ]]; then
            echo "OLDER_WORKFLOW=false" >> $GITHUB_ENV
          fi
          if [[ "${{ github.event.inputs.older-releases }}" != 'true' ]]; then
            echo "OLDER_RELEASES=false" >> $GITHUB_ENV
          fi
        fi
    
    - name: 清理Actions空间
      if: env.OLDER_WORKFLOW == 'true' || (github.event.inputs.older-actions == 'true')
      uses: Mattraks/delete-workflow-runs@main
      with:
        token: ${{ github.token }}
        repository: ${{ github.repository }}       
        retain_days: 0.5
        keep_minimum_runs: 0
    
    - name: 删除releases,可设置保留数
      if: env.OLDER_RELEASES == 'true' || (github.event.inputs.older-releases == 'true')
      uses: dev-drprasad/delete-older-releases@master
      with:
        keep_latest: 0         # 保留多少个发布不删除
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
          
    - name: 同步上游仓库(自动保留.config文件和备份diy-part.sh文件，不影响你自建文件夹，需要密匙)
      if: env.REPO_TOKEN && (github.event.inputs.again-fork == 'fork')
      run: |
        cd $GITHUB_WORKSPACE
        git clone -b main https://github.com/281677160/build-actions.git shangyou
        cd shangyou
        rm -rf build/*/.config
        cd $GITHUB_WORKSPACE
        git clone -b main https://github.com/${{github.repository}}.git repo
        cd repo
        cp -Rf build/Lede_source/diy-part.sh build/Lede_source/diy-part.sh.bak
        cp -Rf build/Lienol_source/diy-part.sh build/Lienol_source/diy-part.sh.bak
        cp -Rf build/Mortal_source/diy-part.sh build/Mortal_source/diy-part.sh.bak
        cp -Rf build/openwrt_amlogic/diy-part.sh build/openwrt_amlogic/diy-part.sh.bak
        cp -Rf $GITHUB_WORKSPACE/shangyou/* ./
        cp -Rf $GITHUB_WORKSPACE/shangyou/.github/workflows/* ./.github/workflows
        git add .
        git commit -m "同步上游281677160/build-actions于$(date +%Y年%m月%d号%H点)" |tee build.log
        if [[ `grep -c "Your branch is up to date with" build.log` -eq '1' ]]; then
          echo "配置文件无更新,所以无需要覆盖!"
        else
          rm -fr build.log
          echo "正在更新${{github.repository}}!"
          git push --quiet "https://${{ secrets.REPO_TOKEN }}@github.com/${{github.repository}}" HEAD:main
          echo "更新完毕!"
        fi
