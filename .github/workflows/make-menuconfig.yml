#
#
# 因为SSH连接配置固件直接编译，会给github停止编译的
#
# 所以本文件是专门用来连接SSH配置.config文件专用
#
# 跟启动编译是一样的，已经默就打开SSH，选择好生成什么源码的.config文件，然后启动，等待进入SSH连接，然后配置文件
#
# 配置完成后会自动上传一份.config文件，下载下来，覆盖到对应的源码上的.config就可以编译了
#
# 如果配置了REPO_TOKEN密匙的话，则会把.config文件自动覆盖到对应源码文件夹的.config中，免除手动覆盖
#
# REPO_TOKEN密匙制作教程：https://git.io/jm.md
#
#

name: 设置.config配置文件
on:
  workflow_dispatch:
    inputs:
      config:
        description: 'true-actions改成true,再按Run workflow启动,若配置文件有更新随即自动启动对应源码编译固件'
        required: false
        default: 'true-actions'

env: 
 REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
 TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-18.04
    if: github.event.repository.owner.id == github.event.sender.id

    name: 制作"${{matrix.target}}"配置文件
    strategy:
      fail-fast: false
      matrix:
        target: [openwrt_amlogic]

        # [Lede_source,Lienol_source,Mortal_source,openwrt_amlogic]

    steps:
    - name: 准备结束
      uses: actions/checkout@v2

    - name: 读取脚本设置
      run: |
        source "${GITHUB_WORKSPACE}/build/${{matrix.target}}/settings.ini"
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV
        echo "DIY_PART_SH=${DIY_PART_SH}" >> $GITHUB_ENV
        echo "Modelfile=${{matrix.target}}" >> $GITHUB_ENV

    - name: 读取扩展文件
      run: |
        echo
        git clone --depth 1 -b main https://github.com/281677160/common build/common > /dev/null 2>&1
        chmod -R +x "${GITHUB_WORKSPACE}/build/common"
        if [[ "${Modelfile}" == "openwrt_amlogic" ]]; then
          echo "ZZZ=package/lean/default-settings/files/zzz-default-settings" >> $GITHUB_ENV
          echo "CODE=amlogic" >> $GITHUB_ENV
        elif [[ "${REPO_BRANCH}" == "master" ]]; then
          echo "ZZZ=package/lean/default-settings/files/zzz-default-settings" >> $GITHUB_ENV
          echo "CODE=Lede" >> $GITHUB_ENV
        elif [[ "${REPO_BRANCH}" == "19.07" ]]; then
          echo "ZZZ=package/default-settings/files/zzz-default-settings" >> $GITHUB_ENV
          echo "CODE=Lienol" >> $GITHUB_ENV
        elif [[ "${REPO_BRANCH}" == "openwrt-21.02" ]]; then
          echo "ZZZ=package/emortal/default-settings/files/zzz-default-settings" >> $GITHUB_ENV
          echo "CODE=Mortal" >> $GITHUB_ENV
        fi
        echo "NETIP=package/base-files/files/etc/networkip" >> $GITHUB_ENV
        echo "DELETE=package/base-files/files/etc/deletefile" >> $GITHUB_ENV
        
    - name: 部署制作.config文件环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update > /dev/null 2>&1
        sudo -E apt-get -qq install -y subversion build-essential libncurses5-dev zlib1g-dev gawk git ccache gettext libssl-dev xsltproc zip git-core wget curl grep > /dev/null 2>&1
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
    
    - name: 下载"${{matrix.target}}"源码
      working-directory: /workdir
      run: |
        git clone -b "$REPO_BRANCH" --single-branch "$REPO_URL" openwrt > /dev/null 2>&1
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd $GITHUB_WORKSPACE/openwrt
        ./scripts/feeds update -a > /dev/null 2>&1
        echo "Home=${GITHUB_WORKSPACE}/openwrt" >> $GITHUB_ENV
        echo "PATH1=${GITHUB_WORKSPACE}/openwrt/build/${{matrix.target}}" >> $GITHUB_ENV
 
    - name: 加载源,补丁和自定义设置
      run: |
        cp -Rf `find ./ -maxdepth 1 -type d ! -path './openwrt' ! -path './'` openwrt
        mv -f "${Home}"/build/common/*.sh "${PATH1}"
        source "${PATH1}/common.sh" && Diy_settings
        cd openwrt
        if [[ "${REPO_BRANCH}" == "master" ]]; then
          source "${PATH1}/common.sh" && Diy_lede
        elif [[ "${REPO_BRANCH}" == "19.07" ]]; then
          source "${PATH1}/common.sh" && Diy_lienol
        elif [[ "${REPO_BRANCH}" == "openwrt-21.02" ]]; then
          source "${PATH1}/common.sh" && Diy_mortal
        fi
        source "${PATH1}/common.sh" && Diy_all > /dev/null 2>&1
        /bin/bash "${PATH1}/$DIY_PART_SH"
        ./scripts/feeds update -a > /dev/null 2>&1
        ./scripts/feeds install -a > /dev/null 2>&1
        [[ -e "$PATH1/$CONFIG_FILE" ]] && mv "$PATH1/$CONFIG_FILE" .config
        
    - name: SSH远程连接（制作.config配置文件）
      uses: danshui-git/debugger-action@master
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: 生成"${{matrix.target}}"配置文件
      run: |
        cd openwrt
        make defconfig
        ./scripts/diffconfig.sh > ${GITHUB_WORKSPACE}/${CONFIG_FILE}
        cp -r ${GITHUB_WORKSPACE}/${CONFIG_FILE} ${GITHUB_WORKSPACE}/config.txt
        echo "TARGET_BOARD=$(awk -F '[="]+' '/TARGET_BOARD/{print $2}' .config)" >> $GITHUB_ENV
        echo "TARGET_SUBTARGET=$(awk -F '[="]+' '/TARGET_SUBTARGET/{print $2}' .config)" >> $GITHUB_ENV
        echo "Compile_Date=$(date +%Y%m%d-%H%M)" >> $GITHUB_ENV
        if [ `grep -c "CONFIG_TARGET_x86_64=y" .config` -eq '1' ]; then
         echo "TARGET_PROFILE=x86-64" >> $GITHUB_ENV
        elif [ `grep -c "CONFIG_TARGET_x86_generic=y" .config` -eq '1' ]; then
         echo "TARGET_PROFILE=x86-32" >> $GITHUB_ENV
        elif [ `grep -c "CONFIG_TARGET.*DEVICE.*=y" .config` -eq '1' ]; then
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "TARGET_PROFILE=$(cat DEVICE_NAME)" >> $GITHUB_ENV
        else
          echo "TARGET_PROFILE=armvirt" >> $GITHUB_ENV
        fi
        
    - name: 上传.config配置文件在 github actions
      uses: actions/upload-artifact@v2
      with:
        name: .config_${{ env.CODE }}_${{ env.TARGET_PROFILE }}_${{ env.Compile_Date }}
        path: config.txt
        
    - name: 修改build-openwrt.yml文件，用于.config有更新时启动"${{matrix.target}}"编译（需要密匙和true-actions改成true）
      if: env.REPO_TOKEN && (github.event.inputs.config == 'true')
      run: |
        cd $GITHUB_WORKSPACE
        git clone -b main https://github.com/${{github.repository}}.git repo
        cd repo
        export QIDONG_paths="$(grep -A 1 'paths:' .github/workflows/build-openwrt.yml |awk 'NR==2' |sed 's/^[ ]*//g' |sed 's/\//\\&/g')"
        export QIDONG_main="$(grep -A 1 'branches:' .github/workflows/build-openwrt.yml |awk 'NR==2' |sed 's/^[ ]*//g' |sed 's/\//\\&/g')"
        if [[ -z "${QIDONG_paths}" ]] || [[ -z "${QIDONG_main}" ]]; then
         curl -fsSL https://ghproxy.com/https://raw.githubusercontent.com/281677160/build-actions/main/.github/workflows/build-openwrt.yml > .github/workflows/build-openwrt.yml
         export QIDONG_paths="$(grep -A 1 'paths:' .github/workflows/build-openwrt.yml |awk 'NR==2' |sed 's/^[ ]*//g' |sed 's/\//\\&/g')"
         export QIDONG_main="$(grep -A 1 'branches:' .github/workflows/build-openwrt.yml |awk 'NR==2' |sed 's/^[ ]*//g' |sed 's/\//\\&/g')"
        fi
        export TARGE="$(cat .github/workflows/build-openwrt.yml |grep "target: \[" |grep  -v \#  |awk 'NR==1'|sed 's/^[ ]*//g' |sed 's/\[/\\&/' |sed 's/\]/\\&/')"
        export TARGE2="target: \\["${Modelfile}"\\]"
        sed -i "s/${TARGE}/${TARGE2}/g" .github/workflows/build-openwrt.yml
        sed -i "s/${QIDONG_paths}/- 'build\/${Modelfile}\/start-up\/start'/g" .github/workflows/build-openwrt.yml
        sed -i "s/${QIDONG_main}/- main/g" .github/workflows/build-openwrt.yml
        git add .
        git commit -m "Update build-openwrt.yml" |tee build.log
        if [[ `grep -c "Your branch is up to date with" build.log` -eq '1' ]]; then
          echo "配置文件无更新,所以无需要覆盖!"
        else
          rm -fr build.log
          echo "正在更新build-openwrt.yml文件!"
          git push --quiet "https://${{ secrets.REPO_TOKEN }}@github.com/${{github.repository}}" HEAD:main
          echo "build-openwrt.yml文件更新完毕!"
        fi
    
    - name: 把新配置的.config配置文件自动覆盖${{matrix.target}}文件夹的.config（需要密匙）
      if: env.REPO_TOKEN
      run: |
        cd $GITHUB_WORKSPACE
        [[ ! -e "repo" ]] && git clone -b main https://github.com/${{github.repository}}.git repo
        cd repo
        rm -Rf build/${{matrix.target}}/${CONFIG_FILE}
        git rm --cache build/${{matrix.target}}/${CONFIG_FILE}
        cp -Rf $GITHUB_WORKSPACE/${CONFIG_FILE} build/${{matrix.target}}/${CONFIG_FILE}
        git add .
        git commit -m "${{env.CODE}}更新${CONFIG_FILE} 机型为${{env.TARGET_PROFILE}}" |tee build.log
        if [[ `grep -c "Your branch is up to date with" build.log` -eq '1' ]]; then
          echo "配置文件无更新,所以无需要覆盖!"
        else
          rm -fr build.log
          if [[ "${{ github.event.inputs.config }}" == 'true' ]]; then
            mkdir -p build/${Modelfile}/start-up
            echo "${{env.CODE}}于$(date +%Y年%m月%d号-%H点%M分)自动触发编译${{env.TARGET_PROFILE}}固件" > build/${Modelfile}/start-up/start
            echo "正在更新${{matrix.target}}文件夹的${CONFIG_FILE}配置文件!"
            git add .
            git commit -m "${{env.CODE}}更新${CONFIG_FILE} 机型为${{env.TARGET_PROFILE}}"
          fi
          git push --quiet "https://${{ secrets.REPO_TOKEN }}@github.com/${{github.repository}}" HEAD:main
          echo ".config更新完毕，已经覆盖至build/${{matrix.target}}/${CONFIG_FILE}!"
        fi
        
    - name: 最后更新build-openwrt.yml（需要密匙）
      if: env.REPO_TOKEN
      run: |
        cd $GITHUB_WORKSPACE/repo
        export YMLTARGE="$(cat .github/workflows/build-openwrt.yml |grep "target: \[" |grep  -v \#  |awk 'NR==1'|sed 's/^[ ]*//g' |sed 's/\[/\\&/' |sed 's/\]/\\&/')"
        export YMLTARGE2="$(cat .github/workflows/make-menuconfig.yml |grep "target: \[" |grep  -v \#  |awk 'NR==1'|sed 's/^[ ]*//g' |sed 's/\[/\\&/' |sed 's/\]/\\&/')"
        sed -i "s/${YMLTARGE}/${YMLTARGE2}/g" .github/workflows/build-openwrt.yml
        git add .
        git commit -m "Update build-openwrt.yml" |tee build.log
        if [[ `grep -c "Your branch is up to date with" build.log` -eq '1' ]] || [[ `grep -c "Your branch is ahead of" build.log` -eq '1' ]]; then
          echo "make-menuconfig.yml和build-openwrt.yml选择机型一致,所以无需更新!"
        else
          rm -fr build.log
          git push --quiet "https://${{ secrets.REPO_TOKEN }}@github.com/${{github.repository}}" HEAD:main
          echo "make-menuconfig.yml和build-openwrt.yml选择机型同步一致更新完毕!"
        fi
